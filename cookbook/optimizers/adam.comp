#version 450

layout(push_constant) uniform pushBlock {
    int total;
    float lr;
    float beta_a;
    float beta_b;
    float eps;
    float weight_decay;
    bool amsgrad;
    int counter;
};

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
layout(binding = 0) buffer buf1 { float P[]; };
layout(binding = 1) buffer bufa { float DP[];};
layout(binding = 1) buffer buf2 { float M[]; };
layout(binding = 2) buffer buf3 { float R[]; };
layout(binding = 3) buffer buf4 { float M_K_HAT[]; };
layout(binding = 4) buffer buf5 { float R_K_HAT[]; };

float dl1_reg(float w, float lam, float esp) {
    return w * lam * esp;
}

float dl2_reg(float w, float lam) {
    return w * lam;
}

float exp_running_avg(float r, float n, float g) {
    return g * r  + (1.0 - g) * n;
}

void adam(){
    for (uint i = gl_GlobalInvocationID.x; i < total; i += gl_NumWorkGroups.x * gl_WorkGroupSize.x){
        DP[i] += dl2_reg(P[i], lr);
        M[i] = exp_running_avg(M[i], DP[i], beta_a);
        R[i] = exp_running_avg(R[i], DP[i] * DP[i], beta_b);
        M_K_HAT[i] = M[i] / (1.0 - pow(beta_b, counter));
        if(amsgrad) {
            R_K_HAT[i] = max(R[i], R_K_HAT[i]);
            P[i] -= lr / (sqrt(R_K_HAT[i]) + eps) * M[i];
        }
        else {
            R_K_HAT[i] = R[i] / (1.0 - pow(beta_b, counter));
            P[i] -= lr * M_K_HAT[i] / (sqrt(R_K_HAT[i]) + eps);
        }
    }
}

void main(){
    adam();
}
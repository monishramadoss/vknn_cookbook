#version 450

layout(push_constant) uniform pushBlock {
		uint total;
		uint batchsize;
		uint channels;
		uint kernel_h;
		uint kernel_w;
		uint kernel_d;
		uint pad_h;
		uint pad_w;
		uint pad_d;
		uint stride_h;
		uint stride_w;
		uint stride_d;
		uint dilation_h;
		uint dilation_w;
		uint dilation_d;
		uint height_col;
		uint width_col;
		uint depth_col;
		uint height_vol;
		uint width_vol;
		uint depth_vol;
};

layout(binding = 0) buffer buf1 { float A[]; };

layout(binding = 1) buffer buf2 { float B[]; };

layout (local_size_x = 16, local_size_y = 64, local_size_z = 1) in;

void vol2col(){
	float n_output_plane = channels * kernel_h * kernel_w * kernel_d;

	uint elt = gl_GlobalInvocationID.y;
	if(elt >= batchsize)
		return;

	float data_vol = elt * channels * height_vol * width_vol * depth_vol;
	float data_col = elt * n_output_plane * height_col * width_col * depth_col;

	uint c_col = gl_GlobalInvocationID.x;
	if(c_col >= n_output_plane)
		return;

	uint w_offset = c_col % uint(kernel_w);
	uint h_offset = uint(c_col / kernel_w) % uint(kernel_h);
	uint d_offset = uint(c_col / kernel_w / kernel_h) % uint(kernel_d);
	uint c_vol = uint(c_col / kernel_w / kernel_h / kernel_d);

	for (uint d_col = 0; d_col < depth_col; ++d_col){
		float d_vol = d_col * stride_d - pad_d + d_offset * dilation_d;
		for (uint h_col = 0; h_col < height_col; ++h_col){
			float h_vol = h_col * stride_h - pad_h + h_offset * dilation_h;
			for (uint w_col = 0; w_col < width_col; ++w_col){
				float w_vol = w_col * stride_w - pad_w + w_offset * dilation_w;
				if (0 <= h_vol && h_vol < height_vol && 0 <= w_vol && w_vol < width_vol && 0 <= d_vol && d_vol < depth_vol){
					uint data_col_idx = uint(floor(data_col + ((c_col * depth_col + d_col) * height_col + h_col) * width_col + w_col));
					uint data_vol_idx = uint(floor(data_vol + ((c_vol * depth_vol + d_vol) * height_vol + h_vol) * width_vol + w_vol));
					B[data_col_idx] = A[data_vol_idx];
				}
			}
		}
	}
}

void main(){
   vol2col();
}